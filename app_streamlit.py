#!/usr/bin/env python3
"""
Chatbot Epson - Interface Streamlit
Vers√£o limpa e funcional para deploy
"""

import streamlit as st
import google.generativeai as genai

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Chatbot Epson - Suporte T√©cnico",
    page_icon="üñ®Ô∏è",
    layout="wide"
)

# Configura√ß√£o da API Gemini
GEMINI_API_KEY = st.secrets.get("GEMINI_API_KEY", "AIzaSyDjejxDFqTSg_i-KDnS2QqsXdiWLydIrSk")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

# Lista de modelos suportados
PRINTER_MODELS = [
    "Epson L3110", "Epson L3150", "Epson L3250", "Epson L3251",
    "Epson L375", "Epson L396", "Epson L4150", "Epson L4260",
    "Epson L5190", "Epson L5290", "Epson L6490", "Epson L1300", "Epson L805"
]

# Inicializa√ß√£o do estado
if 'messages' not in st.session_state:
    st.session_state.messages = []
if 'response_mode' not in st.session_state:
    st.session_state.response_mode = "detalhado"
if 'identified_printer' not in st.session_state:
    st.session_state.identified_printer = None
if 'identification_stage' not in st.session_state:
    st.session_state.identification_stage = None

def detect_printer_in_query(query):
    """Detecta se algum modelo de impressora foi mencionado na pergunta"""
    query_lower = query.lower()
    for model in PRINTER_MODELS:
        # Remove "Epson " do modelo para compara√ß√£o mais flex√≠vel
        model_simple = model.replace("Epson ", "").lower()
        if model_simple in query_lower or model.lower() in query_lower:
            return model
    return None

def generate_funnel_question(query, stage=None):
    """Gera pergunta de afunilamento para identificar a impressora"""
    if stage is None or stage == "initial":
        return """üîç **Preciso identificar sua impressora primeiro!**
        
Para fornecer a melhor assist√™ncia, preciso saber o modelo exato da sua impressora Epson.

**Por favor, me informe:**
1. Voc√™ sabe o modelo da sua impressora? (Ex: L3150, L375, L4260, etc.)
2. Se n√£o souber, sua impressora √©:
   - **Multifuncional** (imprime, copia e digitaliza) ou
   - **Apenas impressora** (s√≥ imprime)?
   
Digite o modelo ou responda sobre o tipo da sua impressora."""
    
    elif stage == "type_known":
        return """üìã **Vamos descobrir o modelo espec√≠fico!**
        
**Me ajude com mais informa√ß√µes:**
- Sua impressora tem **Wi-Fi**?
- Ela tem **tanques de tinta** vis√≠veis na frente ou lateral?
- Voc√™ lembra aproximadamente quando comprou? (ano)
- √â colorida ou apenas preto e branco?"""
    
    elif stage == "features_known":
        return """üéØ **Estamos quase l√°!**
        
**√öltima pergunta para identificar sua impressora:**
- Voc√™ consegue ver alguma etiqueta com o modelo na pr√≥pria impressora?
- Geralmente fica na parte frontal, superior ou traseira
- Procure por algo como: L3150, L375, L4260, etc.

Se n√£o encontrar, descreva o tamanho aproximado (compacta, m√©dia ou grande)."""
    
    else:
        return """‚ùå **N√£o consigo prosseguir sem identificar sua impressora**
        
Infelizmente, para fornecer suporte t√©cnico preciso e seguro, preciso saber o modelo exato da sua impressora Epson.

**Sugest√µes:**
- Verifique a nota fiscal ou manual
- Procure uma etiqueta na impressora
- Acesse as configura√ß√µes da impressora no computador

Quando souber o modelo, me informe para eu poder ajudar! üñ®Ô∏è"""

def generate_response(query, printer_model=None, mode="detalhado"):
    """Gera resposta usando Gemini - APENAS se souber o modelo da impressora"""
    
    # N√ÉO responde sem modelo de impressora
    if not printer_model:
        return None
    
    try:
        # Ajusta o prompt baseado no modo
        if mode == "r√°pido":
            mode_instruction = """
            Forne√ßa uma resposta BREVE e DIRETA, em no m√°ximo 3-4 frases.
            V√° direto ao ponto principal sem muitos detalhes.
            IMPORTANTE: Seja espec√≠fico para o modelo de impressora informado.
            """
        else:  # detalhado
            mode_instruction = """
            Forne√ßa uma resposta COMPLETA e DETALHADA.
            Inclua:
            - Explica√ß√£o passo a passo espec√≠fica para este modelo
            - Poss√≠veis causas do problema neste modelo espec√≠fico
            - Solu√ß√µes alternativas se existirem
            - Dicas de preven√ß√£o para este modelo
            IMPORTANTE: Todas as informa√ß√µes devem ser espec√≠ficas para o modelo informado.
            """
        
        prompt = f"""Voc√™ √© um especialista em impressoras Epson.
        
        Modelo da impressora: {printer_model}
        
        {mode_instruction}
        
        REGRA CR√çTICA: Forne√ßa informa√ß√µes ESPEC√çFICAS para o modelo {printer_model}.
        N√£o d√™ respostas gen√©ricas. Se n√£o souber algo espec√≠fico deste modelo, seja honesto.
        
        Pergunta do usu√°rio: {query}
        
        Responda em portugu√™s de forma clara e espec√≠fica para o modelo {printer_model}."""
        
        response = model.generate_content(prompt)
        
        if response and response.text:
            return response.text
        else:
            return "N√£o foi poss√≠vel gerar resposta. Tente novamente."
            
    except Exception as e:
        return f"Erro ao gerar resposta: {str(e)}"

# Interface principal
st.title("üñ®Ô∏è Chatbot Epson - Suporte T√©cnico")
st.markdown("Sistema inteligente de suporte para impressoras Epson")

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    
    # Sele√ß√£o de impressora
    selected_printer = st.selectbox(
        "üñ®Ô∏è Modelo da Impressora:",
        ["N√£o especificado"] + PRINTER_MODELS
    )
    
    # Atualizar impressora identificada quando selecionada manualmente
    if selected_printer != "N√£o especificado":
        st.session_state.identified_printer = selected_printer
        st.session_state.identification_stage = None
        st.success(f"‚úÖ Modelo identificado: {selected_printer}")
    elif st.session_state.identified_printer:
        st.info(f"üìå Modelo detectado: {st.session_state.identified_printer}")
    
    st.markdown("---")
    
    # Modo de resposta
    st.subheader("üí¨ Modo de Resposta")
    response_mode = st.radio(
        "Escolha o tipo de resposta:",
        ["r√°pido", "detalhado"],
        index=1,  # detalhado por padr√£o
        help="R√°pido: respostas diretas e concisas\nDetalhado: explica√ß√µes completas com passo a passo"
    )
    st.session_state.response_mode = response_mode
    
    if response_mode == "r√°pido":
        st.info("‚ö° Respostas r√°pidas e diretas")
    else:
        st.info("üìñ Respostas detalhadas com explica√ß√µes")
    
    st.markdown("---")
    
    # Limpar chat
    if st.button("üóëÔ∏è Limpar Conversa", use_container_width=True):
        st.session_state.messages = []
        st.session_state.identified_printer = None
        st.session_state.identification_stage = None
        st.rerun()
    
    # Resetar identifica√ß√£o
    if st.session_state.identified_printer and st.button("üîÑ Trocar Impressora", use_container_width=True):
        st.session_state.identified_printer = None
        st.session_state.identification_stage = None
        st.rerun()
    
    st.markdown("---")
    st.markdown("**Vers√£o:** 2.0")
    st.markdown("**Status:** ‚úÖ Online")
    st.markdown("**Modo:** Afunilamento Obrigat√≥rio")

# Mostrar mensagem inicial se n√£o houver hist√≥rico
if not st.session_state.messages and not st.session_state.identified_printer:
    with st.chat_message("assistant"):
        welcome_msg = """üëã **Ol√°! Bem-vindo ao Suporte T√©cnico Epson!**
        
Para fornecer o melhor suporte poss√≠vel, preciso identificar o modelo exato da sua impressora.

**Voc√™ pode:**
1. Selecionar o modelo na barra lateral ‚û°Ô∏è
2. Digitar o modelo diretamente (Ex: "Minha impressora √© L3150")
3. Responder algumas perguntas para eu identificar sua impressora

**Como posso ajudar voc√™ hoje?**"""
        st.markdown(welcome_msg)

# Mostrar mensagens anteriores
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input do usu√°rio
if prompt := st.chat_input("Digite sua pergunta sobre impressoras Epson..."):
    # Adicionar mensagem do usu√°rio
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # Detectar modelo na pergunta
    detected_model = detect_printer_in_query(prompt)
    
    # Atualizar modelo identificado se detectado
    if detected_model:
        st.session_state.identified_printer = detected_model
        st.session_state.identification_stage = None
    
    # Determinar qual modelo usar
    printer_to_use = None
    if selected_printer != "N√£o especificado":
        printer_to_use = selected_printer
    elif st.session_state.identified_printer:
        printer_to_use = st.session_state.identified_printer
    elif detected_model:
        printer_to_use = detected_model
    
    # Gerar e mostrar resposta
    with st.chat_message("assistant"):
        with st.spinner("Processando..."):
            # Se temos um modelo, gerar resposta normal
            if printer_to_use:
                response = generate_response(
                    prompt, 
                    printer_to_use,
                    mode=st.session_state.response_mode
                )
                
                # Adicionar indicador do modelo usado
                response_with_model = f"**[{printer_to_use}]** {response}"
                st.markdown(response_with_model)
                
                # Adicionar resposta ao hist√≥rico
                st.session_state.messages.append({"role": "assistant", "content": response_with_model})
            
            # Se n√£o temos modelo, iniciar afunilamento
            else:
                # Analisar resposta do usu√°rio para avan√ßar no afunilamento
                prompt_lower = prompt.lower()
                
                # Verificar se usu√°rio est√° respondendo sobre tipo de impressora
                if st.session_state.identification_stage == "initial":
                    if "multifuncional" in prompt_lower or "copia" in prompt_lower or "digitaliza" in prompt_lower:
                        st.session_state.identification_stage = "type_known"
                    elif "s√≥ imprime" in prompt_lower or "apenas imprime" in prompt_lower:
                        st.session_state.identification_stage = "type_known"
                
                # Verificar se usu√°rio est√° respondendo sobre recursos
                elif st.session_state.identification_stage == "type_known":
                    if any(word in prompt_lower for word in ["wifi", "wi-fi", "tanque", "colorida", "preto"]):
                        st.session_state.identification_stage = "features_known"
                
                # Verificar se usu√°rio est√° respondendo sobre caracter√≠sticas finais
                elif st.session_state.identification_stage == "features_known":
                    if any(word in prompt_lower for word in ["compacta", "m√©dia", "grande", "pequena"]):
                        st.session_state.identification_stage = "failed"
                
                # Gerar pergunta de afunilamento apropriada
                funnel_response = generate_funnel_question(prompt, st.session_state.identification_stage)
                st.markdown(funnel_response)
                
                # Atualizar est√°gio se for inicial
                if st.session_state.identification_stage is None:
                    st.session_state.identification_stage = "initial"
                
                # Adicionar resposta ao hist√≥rico
                st.session_state.messages.append({"role": "assistant", "content": funnel_response})
