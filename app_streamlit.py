#!/usr/bin/env python3
"""
Chatbot Epson - Interface Streamlit
Vers√£o limpa e funcional para deploy
"""

import streamlit as st
import google.generativeai as genai

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Chatbot Epson - Suporte T√©cnico",
    page_icon="üñ®Ô∏è",
    layout="wide"
)

# Configura√ß√£o da API Gemini
GEMINI_API_KEY = st.secrets.get("GEMINI_API_KEY", "AIzaSyDjejxDFqTSg_i-KDnS2QqsXdiWLydIrSk")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

# Lista de modelos suportados
PRINTER_MODELS = [
    "Epson L3110", "Epson L3150", "Epson L3250", "Epson L3251",
    "Epson L375", "Epson L396", "Epson L4150", "Epson L4260",
    "Epson L5190", "Epson L5290", "Epson L6490", "Epson L1300", "Epson L805"
]

# Inicializa√ß√£o do estado
if 'messages' not in st.session_state:
    st.session_state.messages = []
if 'response_mode' not in st.session_state:
    st.session_state.response_mode = "detalhado"
if 'identified_printer' not in st.session_state:
    st.session_state.identified_printer = None
if 'identification_stage' not in st.session_state:
    st.session_state.identification_stage = None

def normalize_text(text):
    """Normaliza texto para compara√ß√£o mais flex√≠vel"""
    import unicodedata
    import re
    
    # Converter para lowercase
    text = text.lower().strip()
    
    # Remover acentos
    text = ''.join(c for c in unicodedata.normalize('NFD', text) 
                   if unicodedata.category(c) != 'Mn')
    
    # Remover pontua√ß√£o e m√∫ltiplos espa√ßos
    text = re.sub(r'[^\w\s]', ' ', text)
    text = re.sub(r'\s+', ' ', text)
    
    return text.strip()

def detect_printer_in_query(query):
    """Detecta se algum modelo de impressora foi mencionado na pergunta"""
    query_normalized = normalize_text(query)
    
    for model in PRINTER_MODELS:
        # Remove "Epson " do modelo para compara√ß√£o mais flex√≠vel
        model_simple = model.replace("Epson ", "").lower()
        model_normalized = normalize_text(model_simple)
        
        # Verificar varia√ß√µes
        variations = [
            model_normalized,
            model_normalized.replace(" ", ""),
            model_normalized.replace("l", "l "),  # L3150 ‚Üí L 3150
        ]
        
        for variant in variations:
            if variant in query_normalized:
                return model
    return None

def analyze_user_response(prompt, stage):
    """Analisa resposta do usu√°rio de forma inteligente e flex√≠vel"""
    # Normalizar texto para compara√ß√£o
    prompt_normalized = normalize_text(prompt)
    
    if stage == "initial" or stage is None:
        # Verificar se √© multifuncional
        multifuncional_keywords = [
            "multifuncional", "multi funcional", "mult", "3 em 1", "3em1",
            "copia", "copiar", "copi", "digitaliza", "digitalizar", "digital",
            "scanner", "scan", "escanear", "escaneamento", "xerox",
            "todas", "tudo", "completa", "sim ela copia", "sim copia",
            "faz copia", "tem scanner", "tem copia"
        ]
        
        # Verificar impressora simples
        simples_keywords = [
            "so imprime", "apenas imprime", "apenas impressora", "somente imprime",
            "simples", "basica", "normal", "comum", "nao copia", "nao digitaliza",
            "sem scanner", "sem copia", "impressora apenas", "so impressao",
            "nao ela so imprime", "nao so imprime"
        ]
        
        # Testar multifuncional
        for keyword in multifuncional_keywords:
            if keyword in prompt_normalized:
                return "type_known_multi"
        
        # Testar simples
        for keyword in simples_keywords:
            if keyword in prompt_normalized:
                return "type_known_simple"
        
        # Verificar respostas diretas sim/n√£o
        if any(word in prompt_normalized for word in ["sim", "yes", "uhum", "aham", "isso"]):
            # Se disse sim na pergunta sobre multifuncional
            return "type_known_multi"
        
        if any(word in prompt_normalized for word in ["nao", "no", "nop", "negativo"]):
            # Se disse n√£o na pergunta sobre multifuncional  
            return "type_known_simple"
            
        # Verificar se n√£o sabe
        if any(phrase in prompt_normalized for phrase in ["nao sei", "nao lembro", "esqueci", "nao tenho certeza"]):
            return "need_help"
    
    elif stage in ["type_known", "type_known_multi", "type_known_simple"]:
        # Coletar caracter√≠sticas
        features_detected = []
        
        # WiFi
        if any(word in prompt_normalized for word in ["wifi", "wi fi", "wireless", "sem fio", "rede", "internet"]):
            features_detected.append("wifi")
        elif any(word in prompt_normalized for word in ["sem wifi", "nao tem wifi", "cabo", "usb apenas"]):
            features_detected.append("no_wifi")
        
        # Tanque
        if any(word in prompt_normalized for word in ["tanque", "tank", "ecotank", "eco tank", "refil", "garrafa"]):
            features_detected.append("tanque")
        elif any(word in prompt_normalized for word in ["cartucho", "sem tanque", "nao tem tanque"]):
            features_detected.append("no_tanque")
        
        # Cores
        if any(word in prompt_normalized for word in ["colorida", "colorido", "cores", "color", "cmyk"]):
            features_detected.append("colorida")
        elif any(word in prompt_normalized for word in ["preto e branco", "preto branco", "pb", "monocromatica", "mono"]):
            features_detected.append("pb")
        
        # Idade
        if any(word in prompt_normalized for word in ["nova", "novo", "recente", "2024", "2023", "2022", "ano passado"]):
            features_detected.append("nova")
        elif any(word in prompt_normalized for word in ["antiga", "antigo", "velha", "velho", "anos atras", "2020", "2019", "2018"]):
            features_detected.append("antiga")
        
        if features_detected:
            return "features_known"
        
        # Respostas gen√©ricas sim/n√£o
        if any(word in prompt_normalized for word in ["sim", "tem", "possui", "isso", "claro"]):
            return "features_known"  # Avan√ßar
        elif any(word in prompt_normalized for word in ["nao", "nao tem", "sem", "negativo"]):
            return "features_known"  # Avan√ßar
    
    elif stage == "features_known":
        # Verificar tamanhos
        if any(word in prompt_normalized for word in ["compacta", "pequena", "pequeno", "mini", "portatil"]):
            return "size_known"
        elif any(word in prompt_normalized for word in ["media", "medio", "normal", "padrao", "regular"]):
            return "size_known"
        elif any(word in prompt_normalized for word in ["grande", "gigante", "robusta", "profissional", "escritorio"]):
            return "size_known"
        
        # Verificar se usu√°rio desistiu
        if any(word in prompt_normalized for word in ["desisto", "nao consigo", "nao sei", "deixa", "esquece", "cancela"]):
            return "failed"
    
    return None

def generate_funnel_question(query, stage=None):
    """Gera pergunta de afunilamento para identificar a impressora"""
    if stage is None or stage == "initial":
        return """üîç **Preciso identificar sua impressora primeiro!**
        
Para fornecer a melhor assist√™ncia, preciso saber o modelo exato da sua impressora Epson.

**Por favor, me informe:**
1. Voc√™ sabe o modelo da sua impressora? (Ex: L3150, L375, L4260, etc.)
2. Se n√£o souber, sua impressora √©:
   - **Multifuncional** (imprime, copia e digitaliza) ou
   - **Apenas impressora** (s√≥ imprime)?
   
üí° Pode responder de forma simples como "√© multifuncional" ou "s√≥ imprime"."""
    
    elif stage == "need_help":
        return """ü§î **Sem problemas! Vou te ajudar a descobrir!**
        
**Vamos come√ßar com algo simples:**
Sua impressora tem uma **tampa em cima que abre** para colocar documentos?
(Isso √© o scanner - se tem, √© multifuncional)

- **SIM** ‚Üí √â multifuncional
- **N√ÉO** ‚Üí √â impressora simples

Responda com suas palavras! üòä"""
    
    elif stage == "type_known_multi":
        return """‚úÖ **√ìtimo! Sua impressora √© multifuncional!**
        
**Agora me conte sobre estas caracter√≠sticas:**
- Tem **Wi-Fi** ou conex√£o sem fio?
- Voc√™ v√™ **tanques de tinta** transparentes na frente ou lateral?
- √â **colorida** ou s√≥ **preto e branco**?
- √â **nova** (√∫ltimos 2 anos) ou mais **antiga**?

üí° Responda o que souber, n√£o precisa ser tudo!"""
    
    elif stage == "type_known_simple":
        return """‚úÖ **Ok! Sua impressora √© modelo simples (s√≥ imprime)!**
        
**Me ajude com algumas informa√ß√µes:**
- Tem **tanques de tinta** vis√≠veis?
- √â **colorida** ou **preto e branco**?
- Qual o **tamanho** dela? (pequena, m√©dia, grande)

üí° Qualquer detalhe ajuda!"""
    
    elif stage == "type_known":
        return """üìã **Vamos descobrir o modelo espec√≠fico!**
        
**Me ajude com mais informa√ß√µes:**
- Sua impressora tem **Wi-Fi**?
- Ela tem **tanques de tinta** vis√≠veis na frente ou lateral?
- Voc√™ lembra aproximadamente quando comprou? (ano)
- √â colorida ou apenas preto e branco?"""
    
    elif stage == "features_known":
        return """üéØ **Estamos quase l√°!**
        
**√öltima pergunta para identificar sua impressora:**
- Voc√™ consegue ver alguma **etiqueta com o modelo** na pr√≥pria impressora?
- Geralmente fica na parte frontal, superior ou traseira
- Procure por algo como: **L3150, L375, L4260**, etc.

Se n√£o encontrar, me diga o **tamanho** (pequena, m√©dia ou grande)."""
    
    elif stage in ["size_known", "failed"]:
        return """‚ùå **N√£o consegui identificar o modelo exato**
        
Para sua seguran√ßa, preciso saber o modelo espec√≠fico antes de dar instru√ß√µes t√©cnicas.

**Por favor, tente:**
1. **Olhar a etiqueta** na impressora (frente, tampa ou atr√°s)
2. **Verificar a nota fiscal** ou caixa
3. **Olhar no manual** da impressora
4. **Ver nas configura√ß√µes** do computador

O modelo sempre come√ßa com **"L"** seguido de n√∫meros (Ex: L3150, L805)

Quando souber, me diga! üñ®Ô∏è"""
    
    else:
        return """‚ùå **N√£o consigo prosseguir sem identificar sua impressora**
        
Infelizmente, para fornecer suporte t√©cnico preciso e seguro, preciso saber o modelo exato da sua impressora Epson.

**Sugest√µes:**
- Verifique a nota fiscal ou manual
- Procure uma etiqueta na impressora
- Acesse as configura√ß√µes da impressora no computador

Quando souber o modelo, me informe para eu poder ajudar! üñ®Ô∏è"""

def generate_response(query, printer_model=None, mode="detalhado"):
    """Gera resposta usando Gemini - APENAS se souber o modelo da impressora"""
    
    # N√ÉO responde sem modelo de impressora
    if not printer_model:
        return None
    
    try:
        # Ajusta o prompt baseado no modo
        if mode == "r√°pido":
            mode_instruction = """
            Forne√ßa uma resposta BREVE e DIRETA, em no m√°ximo 3-4 frases.
            V√° direto ao ponto principal sem muitos detalhes.
            IMPORTANTE: Seja espec√≠fico para o modelo de impressora informado.
            """
        else:  # detalhado
            mode_instruction = """
            Forne√ßa uma resposta COMPLETA e DETALHADA.
            Inclua:
            - Explica√ß√£o passo a passo espec√≠fica para este modelo
            - Poss√≠veis causas do problema neste modelo espec√≠fico
            - Solu√ß√µes alternativas se existirem
            - Dicas de preven√ß√£o para este modelo
            IMPORTANTE: Todas as informa√ß√µes devem ser espec√≠ficas para o modelo informado.
            """
        
        prompt = f"""Voc√™ √© um especialista em impressoras Epson.
        
        Modelo da impressora: {printer_model}
        
        {mode_instruction}
        
        REGRA CR√çTICA: Forne√ßa informa√ß√µes ESPEC√çFICAS para o modelo {printer_model}.
        N√£o d√™ respostas gen√©ricas. Se n√£o souber algo espec√≠fico deste modelo, seja honesto.
        
        Pergunta do usu√°rio: {query}
        
        Responda em portugu√™s de forma clara e espec√≠fica para o modelo {printer_model}."""
        
        response = model.generate_content(prompt)
        
        if response and response.text:
            return response.text
        else:
            return "N√£o foi poss√≠vel gerar resposta. Tente novamente."
            
    except Exception as e:
        return f"Erro ao gerar resposta: {str(e)}"

# Interface principal
st.title("üñ®Ô∏è Chatbot Epson - Suporte T√©cnico")
st.markdown("Sistema inteligente de suporte para impressoras Epson")

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    
    # Sele√ß√£o de impressora
    selected_printer = st.selectbox(
        "üñ®Ô∏è Modelo da Impressora:",
        ["N√£o especificado"] + PRINTER_MODELS
    )
    
    # Atualizar impressora identificada quando selecionada manualmente
    if selected_printer != "N√£o especificado":
        st.session_state.identified_printer = selected_printer
        st.session_state.identification_stage = None
        st.success(f"‚úÖ Modelo identificado: {selected_printer}")
    elif st.session_state.identified_printer:
        st.info(f"üìå Modelo detectado: {st.session_state.identified_printer}")
    
    st.markdown("---")
    
    # Modo de resposta
    st.subheader("üí¨ Modo de Resposta")
    response_mode = st.radio(
        "Escolha o tipo de resposta:",
        ["r√°pido", "detalhado"],
        index=1,  # detalhado por padr√£o
        help="R√°pido: respostas diretas e concisas\nDetalhado: explica√ß√µes completas com passo a passo"
    )
    st.session_state.response_mode = response_mode
    
    if response_mode == "r√°pido":
        st.info("‚ö° Respostas r√°pidas e diretas")
    else:
        st.info("üìñ Respostas detalhadas com explica√ß√µes")
    
    st.markdown("---")
    
    # Limpar chat
    if st.button("üóëÔ∏è Limpar Conversa", use_container_width=True):
        st.session_state.messages = []
        st.session_state.identified_printer = None
        st.session_state.identification_stage = None
        st.rerun()
    
    # Resetar identifica√ß√£o
    if st.session_state.identified_printer and st.button("üîÑ Trocar Impressora", use_container_width=True):
        st.session_state.identified_printer = None
        st.session_state.identification_stage = None
        st.rerun()
    
    st.markdown("---")
    st.markdown("**Vers√£o:** 2.0")
    st.markdown("**Status:** ‚úÖ Online")
    st.markdown("**Modo:** Afunilamento Obrigat√≥rio")

# Mostrar mensagem inicial se n√£o houver hist√≥rico
if not st.session_state.messages and not st.session_state.identified_printer:
    with st.chat_message("assistant"):
        welcome_msg = """üëã **Ol√°! Bem-vindo ao Suporte T√©cnico Epson!**
        
Para fornecer o melhor suporte poss√≠vel, preciso identificar o modelo exato da sua impressora.

**Voc√™ pode:**
1. Selecionar o modelo na barra lateral ‚û°Ô∏è
2. Digitar o modelo diretamente (Ex: "Minha impressora √© L3150")
3. Responder algumas perguntas para eu identificar sua impressora

**Como posso ajudar voc√™ hoje?**"""
        st.markdown(welcome_msg)

# Mostrar mensagens anteriores
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input do usu√°rio
if prompt := st.chat_input("Digite sua pergunta sobre impressoras Epson..."):
    # Adicionar mensagem do usu√°rio
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # Detectar modelo na pergunta
    detected_model = detect_printer_in_query(prompt)
    
    # Atualizar modelo identificado se detectado
    if detected_model:
        st.session_state.identified_printer = detected_model
        st.session_state.identification_stage = None
    
    # Determinar qual modelo usar
    printer_to_use = None
    if selected_printer != "N√£o especificado":
        printer_to_use = selected_printer
    elif st.session_state.identified_printer:
        printer_to_use = st.session_state.identified_printer
    elif detected_model:
        printer_to_use = detected_model
    
    # Gerar e mostrar resposta
    with st.chat_message("assistant"):
        with st.spinner("Processando..."):
            # Se temos um modelo, gerar resposta normal
            if printer_to_use:
                response = generate_response(
                    prompt, 
                    printer_to_use,
                    mode=st.session_state.response_mode
                )
                
                # Adicionar indicador do modelo usado
                response_with_model = f"**[{printer_to_use}]** {response}"
                st.markdown(response_with_model)
                
                # Adicionar resposta ao hist√≥rico
                st.session_state.messages.append({"role": "assistant", "content": response_with_model})
            
            # Se n√£o temos modelo, iniciar afunilamento
            else:
                # Usar fun√ß√£o inteligente de an√°lise
                current_stage = st.session_state.identification_stage
                analysis_result = analyze_user_response(prompt, current_stage)
                
                # Determinar pr√≥ximo est√°gio baseado na an√°lise
                if analysis_result:
                    new_stage = analysis_result
                else:
                    # Se n√£o entendeu a resposta, manter no mesmo est√°gio
                    new_stage = current_stage if current_stage else "initial"
                
                # Atualizar est√°gio
                st.session_state.identification_stage = new_stage
                
                # Gerar pergunta de afunilamento apropriada
                funnel_response = generate_funnel_question(prompt, new_stage)
                st.markdown(funnel_response)
                
                # Adicionar resposta ao hist√≥rico
                st.session_state.messages.append({"role": "assistant", "content": funnel_response})
