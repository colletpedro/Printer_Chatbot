#!/usr/bin/env python3
import asyncio
import time
import json
from pathlib import Path
import sys

# Adiciona src ao path
sys.path.insert(0, str(Path(__file__).parent))

from src.workers.migration import process_drive_updates
from src.core.models import WebhookEvent

async def auto_monitor():
    """Monitor autom√°tico que verifica mudan√ßas periodicamente"""
    
    print("ü§ñ MONITOR AUTOM√ÅTICO ATIVO")
    print("=" * 50)
    print("üîÑ Verificando mudan√ßas a cada 5 minutos...")
    print("üìÅ Novos PDFs ser√£o processados automaticamente")
    print("‚èπÔ∏è Pressione Ctrl+C para parar")
    print("=" * 50)
    print()
    
    while True:
        try:
            print(f"üîç [{time.strftime('%H:%M:%S')}] Verificando novos PDFs...")
            
            # Simula evento de webhook
            event = WebhookEvent(
                channel_id="auto-monitor",
                resource_state="update"
            )
            
            # Processa atualiza√ß√µes
            result = await process_drive_updates(event)
            
            if result.success:
                if result.processed_files:
                    print(f"‚úÖ Processados {len(result.processed_files)} arquivos:")
                    for file in result.processed_files:
                        print(f"   üìÑ {file}")
                    print(f"üß© Total de se√ß√µes: {result.total_sections}")
                else:
                    print("‚ÑπÔ∏è Nenhum arquivo novo detectado")
            else:
                print("‚ùå Erro no processamento:")
                for error in result.errors:
                    print(f"   ‚Ä¢ {error}")
            
            print(f"‚è≥ Pr√≥xima verifica√ß√£o em 5 minutos...")
            print()
            
            # Aguarda 5 minutos
            await asyncio.sleep(300)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Monitor autom√°tico interrompido")
            break
        except Exception as e:
            print(f"‚ùå Erro no monitor: {e}")
            await asyncio.sleep(60)  # Aguarda 1 minuto em caso de erro

if __name__ == "__main__":
    asyncio.run(auto_monitor())
