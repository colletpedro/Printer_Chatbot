#!/usr/bin/env python3
"""
Chatbot Epson com ChromaDB - Vers√£o Moderna
Sistema exclusivamente ChromaDB com busca sem√¢ntica avan√ßada

CARACTER√çSTICAS:
- Busca sem√¢ntica exclusiva via ChromaDB (sem fallback JSON)
- Falha r√°pida se ChromaDB n√£o dispon√≠vel
- API Key segura via vari√°veis de ambiente
- Interface moderna e limpa
- Detec√ß√£o inteligente de impressoras
- Melhoria significativa na qualidade das respostas
"""

import json
import time
import re
import unicodedata
import os
import sys
from collections import Counter
from difflib import SequenceMatcher
from dotenv import load_dotenv
import google.generativeai as genai

# Carrega vari√°veis de ambiente
load_dotenv()

# Adiciona path para importar ChromaDB integration e sync
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'scripts'))

# Configura√ß√µes da API Gemini
# Chave da API Gemini (hardcoded para facilitar uso)
GEMINI_API_KEY = "AIzaSyDjejxDFqTSg_i-KDnS2QqsXdiWLydIrSk"
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

# Controle otimizado para respostas mais longas
last_request_time = 0
MIN_REQUEST_INTERVAL = 4
request_times = []
MAX_REQUESTS_PER_MINUTE = 8

knowledge_base = []

# Base de dados de metadados das impressoras (mantida do original)
PRINTER_METADATA = {
    'impressoraL3110': {
        'full_name': 'Epson L3110',
        'aliases': ['l3110', '3110', 'l 3110', 'epson l3110', 'epson 3110'],
        'type': 'colorida',
        'features': ['multifuncional', 'wifi', 'ecotank', 'tanque'],
        'series': 'L3000',
        'description': 'Multifuncional colorida com sistema EcoTank'
    },
    'impressoraL3150': {
        'full_name': 'Epson L3150',
        'aliases': ['l3150', '3150', 'l 3150', 'epson l3150', 'epson 3150'],
        'type': 'colorida',
        'features': ['multifuncional', 'wifi', 'ecotank', 'tanque'],
        'series': 'L3000',
        'description': 'Multifuncional colorida com sistema EcoTank'
    },
    'impressoral3250_l3251': {
        'full_name': 'Epson L3250/L3251',
        'aliases': ['l3250', 'l3251', '3250', '3251', 'l 3250', 'l 3251', 'epson l3250', 'epson l3251', 'epson 3250', 'epson 3251'],
        'type': 'colorida',
        'features': ['multifuncional', 'wifi', 'ecotank', 'tanque', 'duplex'],
        'series': 'L3000',
        'description': 'Multifuncional colorida com sistema EcoTank e impress√£o duplex'
    },
    'impressoraL375': {
        'full_name': 'Epson L375',
        'aliases': ['l375', '375', 'l 375', 'epson l375', 'epson 375'],
        'type': 'colorida',
        'features': ['multifuncional', 'wifi', 'ecotank', 'tanque'],
        'series': 'L300',
        'description': 'Multifuncional colorida com sistema EcoTank'
    },
    'impressoraL4150': {
        'full_name': 'Epson L4150',
        'aliases': ['l4150', '4150', 'l 4150', 'epson l4150', 'epson 4150'],
        'type': 'colorida',
        'features': ['multifuncional', 'wifi', 'ecotank', 'tanque', 'duplex', 'adf'],
        'series': 'L4000',
        'description': 'Multifuncional colorida com sistema EcoTank, duplex e ADF'
    },
    'impressoraL4260': {
        'full_name': 'Epson L4260',
        'aliases': ['l4260', '4260', 'l 4260', 'epson l4260', 'epson 4260'],
        'type': 'colorida',
        'features': ['multifuncional', 'wifi', 'ecotank', 'tanque', 'duplex', 'adf'],
        'series': 'L4000',
        'description': 'Multifuncional colorida com sistema EcoTank, duplex e ADF'
    },
    'impressoral5190': {
        'full_name': 'Epson L5190',
        'aliases': ['l5190', '5190', 'l 5190', 'epson l5190', 'epson 5190'],
        'type': 'colorida',
        'features': ['multifuncional', 'wifi', 'ecotank', 'tanque', 'duplex', 'adf', 'fax'],
        'series': 'L5000',
        'description': 'Multifuncional colorida com sistema EcoTank, duplex, ADF e fax'
    },
    'impressoral6490': {
        'full_name': 'Epson L6490',
        'aliases': ['l6490', '6490', 'l 6490', 'epson l6490', 'epson 6490'],
        'type': 'colorida',
        'features': ['multifuncional', 'wifi', 'ecotank', 'tanque', 'duplex', 'adf', 'fax', 'a3'],
        'series': 'L6000',
        'description': 'Multifuncional colorida A3 com sistema EcoTank, duplex, ADF e fax'
    },
    'impressoraL1300': {
        'full_name': 'Epson L1300',
        'aliases': ['l1300', '1300', 'l 1300', 'epson l1300', 'epson 1300'],
        'type': 'colorida',
        'features': ['ecotank', 'tanque', 'a3'],
        'series': 'L1000',
        'description': 'Impressora colorida A3 com sistema EcoTank (s√≥ imprime)'
    }
}

# Sistema ChromaDB
chromadb_search = None
using_chromadb = False

def sync_printer_metadata_from_chromadb():
    """
    Sincroniza PRINTER_METADATA com TODOS os modelos dispon√≠veis no ChromaDB.
    Garante que qualquer impressora na base seja reconhecida automaticamente.
    """
    global PRINTER_METADATA
    
    try:
        from printer_metadata_sync import build_complete_printer_metadata
        
        # Obt√©m metadados completos do ChromaDB
        dynamic_metadata = build_complete_printer_metadata()
        
        if dynamic_metadata:
            # Atualiza PRINTER_METADATA com os dados din√¢micos
            PRINTER_METADATA.update(dynamic_metadata)
            print(f"   üì± {len(dynamic_metadata)} modelos sincronizados do ChromaDB")
            return True
        else:
            print("   ‚ö†Ô∏è Nenhum modelo encontrado para sincronizar")
            return False
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro na sincroniza√ß√£o de metadados: {e}")
        # Continua com metadados est√°ticos se falhar
        return False

def init_chromadb():
    """Inicializa ChromaDB - OBRIGAT√ìRIO (sem fallback)"""
    global chromadb_search, using_chromadb
    
    try:
        from chromadb_integration_example import ChromaDBSearch
        chromadb_search = ChromaDBSearch()
        using_chromadb = True
        print("‚úÖ ChromaDB carregado - sistema de busca sem√¢ntica ativo!")
        return True
    except Exception as e:
        print("‚ùå ERRO CR√çTICO: ChromaDB n√£o dispon√≠vel")
        print(f"   Detalhes: {e}")
        print("\nüí° SOLU√á√ïES:")
        print("   1. Execute: python scripts/sync_drive_chromadb.py")
        print("   2. Verifique se o ChromaDB foi inicializado corretamente")
        print("   3. Verifique as depend√™ncias: pip install chromadb")
        print("\nüö´ Este chatbot funciona EXCLUSIVAMENTE com ChromaDB")
        sys.exit(1)

def expand_ink_query(query):
    """Expande consultas sobre tinta para melhorar busca sem√¢ntica"""
    query_lower = query.lower()
    
    # Mapeia termos relacionados √† tinta
    ink_synonyms = {
        'trocar': ['recarregar', 'reabastecer', 'adicionar', 'inserir'],
        'tinta': ['tinta', 'cartucho', 'refil', 'suprimento'],
        'acabou': ['vazio', 'baixo', 'insuficiente', 'esgotado']
    }
    
    # Se a consulta √© sobre tinta, adiciona sin√¥nimos importantes
    if any(word in query_lower for word in ['tinta', 'cartucho', 'trocar', 'recarregar']):
        expanded_terms = []
        
        # Adiciona termos principais
        if 'trocar' in query_lower or 'troca' in query_lower:
            expanded_terms.extend(['recarregar', 'reabastecer'])
        if 'tinta' in query_lower:
            expanded_terms.extend(['garrafas de tinta', 'tanque de tinta'])
            
        if expanded_terms:
            return f"{query} {' '.join(expanded_terms)}"
    
    return query

def enhanced_search_chromadb(query, printer_model=None):
    """
    Busca sem√¢ntica exclusiva via ChromaDB.
    Retorna lista de tuplas (documento, score).
    """
    if not (using_chromadb and chromadb_search):
        print("‚ùå ERRO CR√çTICO: ChromaDB n√£o inicializado")
        sys.exit(1)

    try:
        print("üîç Executando busca sem√¢ntica...")

        # Expande consulta para melhorar busca de tinta
        expanded_query = expand_ink_query(query)
        if expanded_query != query:
            print(f"   üîç Consulta expandida: '{expanded_query}'")

        results = chromadb_search.semantic_search(
            query=expanded_query,
            printer_model=printer_model,
            n_results=15,
            min_similarity=0.2
        )

        if results:
            print(f"   ‚úÖ Encontrados {len(results)} resultados relevantes")
            return results
        else:
            print("   ‚ö†Ô∏è  Nenhum resultado encontrado")
            return []

    except Exception as e:
        print(f"‚ùå ERRO na busca ChromaDB: {e}")
        print("üí° Verifique se o ChromaDB est√° funcionando corretamente")
        sys.exit(1)

# FUN√á√ïES UTILIT√ÅRIAS (mantidas para detec√ß√£o de impressoras)

def normalize_text(text):
    """Normaliza texto removendo acentos, mai√∫sculas e caracteres especiais"""
    if not text:
        return ""
    
    # Remove acentos
    text = unicodedata.normalize('NFD', text)
    text = ''.join(char for char in text if unicodedata.category(char) != 'Mn')
    
    # Converte para min√∫sculas
    text = text.lower()
    
    # Remove caracteres especiais, mant√©m apenas letras, n√∫meros e espa√ßos
    text = re.sub(r'[^a-z0-9\s]', ' ', text)
    
    # Remove espa√ßos m√∫ltiplos
    text = re.sub(r'\s+', ' ', text).strip()
    
    return text

def calculate_similarity(text1, text2):
    """Calcula similaridade entre duas strings (0-1)"""
    return SequenceMatcher(None, normalize_text(text1), normalize_text(text2)).ratio()

def is_cosmetic_difference(user_input, target_name):
    """Verifica se a diferen√ßa entre strings √© apenas cosm√©tica (espa√ßos, mai√∫sculas, etc.)"""
    # Normaliza ambas as strings removendo espa√ßos, acentos e convertendo para min√∫sculas
    def deep_normalize(text):
        normalized = normalize_text(text)
        # Remove espa√ßos, h√≠fens, underscores e outros caracteres de formata√ß√£o
        normalized = re.sub(r'[^\w]', '', normalized)
        return normalized
    
    user_clean = deep_normalize(user_input)
    target_clean = deep_normalize(target_name)
    
    # Se ap√≥s limpeza completa s√£o id√™nticas, √© diferen√ßa cosm√©tica
    if user_clean == target_clean:
        return True
    
    # Verifica se uma string cont√©m a outra (para casos como "L3150" vs "impressoraL3150")
    if user_clean in target_clean or target_clean in user_clean:
        # Calcula a propor√ß√£o de caracteres em comum
        shorter = min(len(user_clean), len(target_clean))
        longer = max(len(user_clean), len(target_clean))
        if shorter / longer >= 0.8:  # 80% dos caracteres em comum
            return True
    
    return False

def find_similar_printers(user_input, threshold=0.6, knowledge_base=None):
    """Encontra impressoras similares baseado no input do usu√°rio"""
    user_input_norm = normalize_text(user_input)
    matches = []
    
    # Busca primeiro nos metadados est√°ticos
    for printer_id, metadata in PRINTER_METADATA.items():
        # Verifica nome completo
        full_name_similarity = calculate_similarity(user_input_norm, metadata['full_name'])
        if full_name_similarity >= threshold:
            matches.append((printer_id, metadata, full_name_similarity, 'nome_completo'))
        
        # Verifica aliases
        for alias in metadata['aliases']:
            alias_similarity = calculate_similarity(user_input_norm, alias)
            if alias_similarity >= threshold:
                matches.append((printer_id, metadata, alias_similarity, 'alias'))
        
        # Verifica se cont√©m partes do nome
        for part in user_input_norm.split():
            if len(part) >= 3:  # Evita matches em palavras muito curtas
                for alias in metadata['aliases']:
                    if part in alias or alias in part:
                        matches.append((printer_id, metadata, 0.7, 'parcial'))
    
    # Busca adicional em modelos dispon√≠veis que n√£o est√£o no PRINTER_METADATA
    if knowledge_base:
        available_models = get_available_printer_models(knowledge_base)
        for model_id in available_models:
            if model_id not in PRINTER_METADATA:
                # Gera metadados dinamicamente para este modelo
                try:
                    dynamic_metadata = get_printer_metadata_dynamic(model_id, knowledge_base)
                    if dynamic_metadata:
                        # Verifica nome completo
                        full_name_similarity = calculate_similarity(user_input_norm, dynamic_metadata['full_name'])
                        if full_name_similarity >= threshold:
                            matches.append((model_id, dynamic_metadata, full_name_similarity, 'nome_completo'))
                        
                        # Verifica aliases
                        for alias in dynamic_metadata.get('aliases', []):
                            alias_similarity = calculate_similarity(user_input_norm, alias)
                            if alias_similarity >= threshold:
                                matches.append((model_id, dynamic_metadata, alias_similarity, 'alias'))
                        
                        # Verifica se cont√©m partes do nome
                        for part in user_input_norm.split():
                            if len(part) >= 3:
                                for alias in dynamic_metadata.get('aliases', []):
                                    if part in alias or alias in part:
                                        matches.append((model_id, dynamic_metadata, 0.7, 'parcial'))
                except Exception:
                    # Se falhar na gera√ß√£o din√¢mica, continua
                    pass
    
    # Remove duplicatas e ordena por similaridade
    unique_matches = {}
    for printer_id, metadata, similarity, match_type in matches:
        if printer_id not in unique_matches or unique_matches[printer_id][2] < similarity:
            unique_matches[printer_id] = (printer_id, metadata, similarity, match_type)
    
    return sorted(unique_matches.values(), key=lambda x: x[2], reverse=True)

def auto_generate_printer_metadata(model_name):
    """
    Automatically generate basic metadata for unknown printer models
    """
    # Extract model number/name from the model_name
    model_clean = model_name.replace('impressora', '').upper()
    
    # Try to extract series information
    series = 'Unknown'
    if 'L3' in model_clean:
        series = 'L3000'
    elif 'L4' in model_clean:
        series = 'L4000'
    elif 'L5' in model_clean:
        series = 'L5000'
    elif 'L6' in model_clean:
        series = 'L6000'
    
    # Generate basic aliases
    aliases = []
    # Try to extract the model number (e.g., L4260 from impressoraL4260)
    import re
    model_match = re.search(r'L?\d{4,5}', model_clean)
    if model_match:
        model_num = model_match.group()
        aliases.extend([
            model_num.lower(),
            model_num,
            f'l {model_num[-4:]}',
            f'epson {model_num.lower()}',
            f'epson {model_num}'
        ])
    
    return {
        'full_name': f'Epson {model_clean}',
        'aliases': aliases,
        'type': 'colorida',  # Default assumption for newer models
        'features': ['multifuncional', 'wifi', 'ecotank', 'tanque'],  # Common features
        'series': series,
        'description': f'Impressora multifuncional Epson {model_clean} com sistema EcoTank'
    }

def get_printer_metadata_dynamic(model_name, knowledge_base):
    """
    Get printer metadata, generating it automatically if not found in PRINTER_METADATA
    """
    # First check if we have predefined metadata
    if model_name in PRINTER_METADATA:
        return PRINTER_METADATA[model_name]
    
    # If not found, generate metadata automatically
    print(f"üîß Gerando metadados automaticamente para: {model_name}")
    auto_metadata = auto_generate_printer_metadata(model_name)
    
    # Temporarily add to PRINTER_METADATA for this session
    PRINTER_METADATA[model_name] = auto_metadata
    
    return auto_metadata

def can_make_request():
    """Controla rate limiting da API"""
    global last_request_time, request_times
    
    current_time = time.time()
    
    # Remove requisi√ß√µes antigas (mais de 1 minuto)
    request_times = [t for t in request_times if current_time - t < 60]
    
    # Verifica limite de requisi√ß√µes por minuto
    if len(request_times) >= MAX_REQUESTS_PER_MINUTE:
        wait_time = 60 - (current_time - request_times[0])
        return False, f"‚è≥ Limite de requisi√ß√µes atingido. Aguarde {wait_time:.0f}s"
    
    # Verifica intervalo m√≠nimo entre requisi√ß√µes
    if current_time - last_request_time < MIN_REQUEST_INTERVAL:
        wait_time = MIN_REQUEST_INTERVAL - (current_time - last_request_time)
        return False, f"‚è≥ Aguarde {wait_time:.1f}s antes da pr√≥xima pergunta"
    
    return True, "OK"

def check_question_relevance(query):
    """Verifica se a pergunta √© relevante para impressoras"""
    try:
        relevant_keywords = [
            'impressora', 'imprimir', 'papel', 'tinta', 'cartucho', 'scanner', 'wifi',
            'configurar', 'instalar', 'problema', 'erro', 'qualidade', 'xerox', 'copia',
            'ecotank', 'tanque', 'refil', 'original', 'compativel', 'driver', 'software',
            'limpar', 'manutencao', 'calibrar', 'alinhar', 'obstrucao', 'emperrou',
            'conectar', 'rede', 'usb', 'wireless', 'bluetooth', 'duplex', 'frente', 'verso',
            'epson', 'l3110', 'l3150', 'l3250', 'l375', 'l4150', 'l4260', 'l5190', 'l6490', 'l1300'
        ]
        
        query_lower = normalize_text(query)
        
        # Verifica se cont√©m pelo menos uma palavra relevante
        for keyword in relevant_keywords:
            if keyword in query_lower:
                return True
        
        # Se n√£o encontrou keywords relevantes, considera irrelevante
        return False
        
    except Exception as e:
        print(f"Erro na verifica√ß√£o de relev√¢ncia: {e}")
        return True  # Em caso de erro, assume que √© relevante para n√£o bloquear

def reload_knowledge_base_if_updated():
    """Recarrega a base de conhecimento se detectar que foi atualizada"""
    try:
        is_updated, status = check_and_reload_manual()
        
        if is_updated:
            print("\nüîÑ Detectada atualiza√ß√£o na base de conhecimento!")
            # Atualiza modelos diretamente do ChromaDB (modo somente ChromaDB)
            try:
                available_models = chromadb_search.get_available_printer_models()
            except Exception:
                available_models = []
            print(f"   üì± Modelos dispon√≠veis: {len(available_models)}")
            
            return True, "Base de conhecimento atualizada com sucesso"
        
        return False, status
        
    except Exception as e:
        return False, f"Erro ao recarregar base: {e}"

def auto_update_chromadb_if_needed():
    """Atualiza ChromaDB automaticamente se detectar mudan√ßas na base de conhecimento"""
    global chromadb_search
    
    try:
        # Verifica se h√° atualiza√ß√µes pendentes
        is_updated, status = check_and_reload_manual()
        
        if is_updated:
            print("\nATUALIZA√á√ÉO AUTOM√ÅTICA INICIADA")
            print("=" * 50)
            print("Detectadas mudan√ßas na base de conhecimento!")
            print("Atualizando ChromaDB automaticamente...")
            print("(Isso pode demorar alguns minutos)")
            print("")
            
            # Importa e executa a migra√ß√£o
            import subprocess
            import sys
            
            # Caminho para o script de migra√ß√£o direta (sem JSON)
            migrate_script = os.path.join(os.path.dirname(__file__), '..', 'scripts', 'migrate_from_drive_to_chromadb.py')
            
            print("Executando migra√ß√£o para ChromaDB...")
            print("Por favor, aguarde...")
            
            # Executa o script de migra√ß√£o
            result = subprocess.run([
                sys.executable, migrate_script
            ], capture_output=True, text=True, cwd=os.path.dirname(migrate_script))
            
            if result.returncode == 0:
                print("\nATUALIZA√á√ÉO CONCLU√çDA COM SUCESSO!")
                print("=" * 50)
                print("ChromaDB foi atualizado com os novos dados.")
                print("Reinicializando sistema ChromaDB...")
                
                # Reinicializa o ChromaDB
                init_chromadb()
                
                return True, "ChromaDB atualizado automaticamente"
            else:
                print(f"\nERRO na atualiza√ß√£o autom√°tica:")
                print(f"C√≥digo de erro: {result.returncode}")
                if result.stderr:
                    print(f"Erro: {result.stderr}")
                print("\nContinuando com a base atual...")
                return False, "Erro na atualiza√ß√£o autom√°tica do ChromaDB"
        
        return False, "Nenhuma atualiza√ß√£o necess√°ria"
        
    except Exception as e:
        print(f"\nErro na atualiza√ß√£o autom√°tica: {e}")
        print("Continuando com a base atual...")
        return False, f"Erro na atualiza√ß√£o autom√°tica: {e}"

def check_and_reload_manual():
    """Verifica se o manual foi atualizado recentemente"""
    try:
        webhook_activity_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'webhook_activity.json')
        chroma_log_path = os.path.join(os.path.dirname(__file__), '..', 'chromadb_storage', 'migration_log.json')
        
        if not os.path.exists(webhook_activity_path):
            return False, "Atividade de webhook n√£o encontrada"
        
        # Verifica timestamp do webhook
        with open(webhook_activity_path, 'r', encoding='utf-8') as f:
            webhook_data = json.load(f)

        # Normaliza o formato: aceita tanto lista quanto dict com chave 'activities'
        if isinstance(webhook_data, dict):
            activities = webhook_data.get('activities', [])
            # Se n√£o houver chave 'activities' mas o dict se parecer com uma activity √∫nica
            if not activities:
                activities = [webhook_data]
        elif isinstance(webhook_data, list):
            activities = webhook_data
        else:
            return False, "Formato inesperado de webhook_activity.json"

        # Filtra somente dicts v√°lidos
        activities = [a for a in activities if isinstance(a, dict)]
        if not activities:
            return False, "Nenhuma atividade de webhook encontrada"

        # Busca a √∫ltima activity com timestamp; preferir update_success quando existir
        def is_update_success(act):
            et = act.get('type') or act.get('event_type')
            return et == 'update_success'

        # Ordena por timestamp na cauda (mant√©m ordem original, mas tentamos priorizar update_success)
        last_activity = next((a for a in reversed(activities) if is_update_success(a)), activities[-1])
        last_update_time = last_activity.get('timestamp', '')
        
        # Pega timestamp do √∫ltimo ingestion/migration do ChromaDB
        migration_dt = None
        if os.path.exists(chroma_log_path):
            try:
                with open(chroma_log_path, 'r', encoding='utf-8') as f:
                    mig = json.load(f)
                mig_ts = mig.get('migration_date') or mig.get('date')
                if mig_ts:
                    migration_dt = __import__('datetime').datetime.fromisoformat(mig_ts.replace('Z', '+00:00'))
            except Exception:
                migration_dt = None
        
        # Se n√£o existe log de migra√ß√£o ainda, e h√° activity de webhook, pedimos atualiza√ß√£o
        if migration_dt is None and last_update_time:
            return True, f"Atualiza√ß√£o necess√°ria (sem hist√≥rico de migra√ß√£o; webhook: {last_update_time})"
        
        # Se o webhook √© mais recente que a migra√ß√£o atual, precisa atualizar
        # Tenta comparar de forma robusta usando datetime quando poss√≠vel
        try:
            from datetime import datetime
            # webhook usa ISO 8601
            webhook_dt = None
            if last_update_time:
                # Suporta 'Z' no final
                iso = last_update_time.replace('Z', '+00:00')
                webhook_dt = datetime.fromisoformat(iso)
            if webhook_dt and migration_dt and webhook_dt > migration_dt:
                return True, f"Atualiza√ß√£o dispon√≠vel (webhook: {last_update_time} > migra√ß√£o: {migration_dt.isoformat()})"
        except Exception:
            # Fallback: compara√ß√£o por string (menos precisa, mas evita quebra)
            if last_update_time:
                return False, "N√£o foi poss√≠vel comparar timestamps com precis√£o"
        
        return False, "ChromaDB est√° atualizado"
        
    except Exception as e:
        return False, f"Erro ao verificar atualiza√ß√µes: {e}"

def check_webhook_status():
    """Verifica status do webhook"""
    try:
        webhook_channels_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'webhook_channels.json')
        
        if not os.path.exists(webhook_channels_path):
            return False, "Webhook n√£o configurado"
        
        with open(webhook_channels_path, 'r', encoding='utf-8') as f:
            channels_data = json.load(f)

        # Normaliza formato: aceita dict com 'channels' ou lista direta
        if isinstance(channels_data, dict):
            channels = channels_data.get('channels', [])
            if not channels:
                # Pode ser um dict de um √∫nico canal
                channels = [channels_data]
        elif isinstance(channels_data, list):
            channels = channels_data
        else:
            return False, "Formato inesperado de webhook_channels.json"

        # Filtra canais v√°lidos e ativos
        active_channels = [ch for ch in channels if isinstance(ch, dict) and ch.get('status') == 'active']
        
        if not active_channels:
            return False, "Nenhum canal ativo"
        
        return True, f"Webhook ativo ({len(active_channels)} canal(is))"
        
    except Exception as e:
        return False, f"Erro ao verificar webhook: {e}"

def load_complete_manual():
    """Carrega manual completo processado"""
    try:
        # Primeiro, verifica se h√° atualiza√ß√µes recentes
        print("üîç Verificando atualiza√ß√µes recentes...")
        is_updated, update_status = check_and_reload_manual()
        print(f"   {update_status}")
        
        manual_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'manual_complete.json')
        with open(manual_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"Manual carregado: {data['manual_info']['source']}")
        print(f"Se√ß√µes: {data['manual_info']['total_sections']}")
        print(f"Processado em: {data['manual_info']['processed_at']}")
        
        # Check webhook status
        webhook_active, webhook_status = check_webhook_status()
        print(f"Status do webhook: {webhook_status}")
        
        return data['sections']
    
    except FileNotFoundError:
        print("Arquivo manual_complete.json n√£o encontrado")
        print("Execute: python3 core/extract_pdf_complete.py")
        return None
    except Exception as e:
        print(f"Erro ao carregar manual: {e}")
        return None

def get_available_printer_models(knowledge_base):
    """Obt√©m lista de modelos dispon√≠veis na base de conhecimento"""
    if not knowledge_base:
        return []
    
    models = set()
    for section in knowledge_base:
        if section.get('printer_model'):
            models.add(section['printer_model'])
    
    return sorted(list(models))

def ask_filtering_questions(available_printers):
    """Faz perguntas para filtrar impressoras quando h√° m√∫ltiplas op√ß√µes, com seguran√ßa para modelos desconhecidos"""
    
    # Garante que todos os modelos tenham metadados (gera dinamicamente quando faltar)
    normalized_printers = []
    for model in available_printers:
        if model not in PRINTER_METADATA:
            try:
                meta = get_printer_metadata_dynamic(model, None)
                if meta:
                    PRINTER_METADATA[model] = meta
            except Exception:
                pass
        normalized_printers.append(model)
    
    # Trabalha apenas com modelos que temos algum metadado ap√≥s a normaliza√ß√£o
    available_printers = [p for p in normalized_printers if p in PRINTER_METADATA]
    if not available_printers:
        print("\n‚ùå N√£o foi poss√≠vel identificar sua impressora com precis√£o.")
        print("Modelos fornecidos n√£o possuem metadados conhecidos nesta vers√£o.")
        return None
    
    # Pergunta 1: Tipo (mono/colorida)
    types = set(PRINTER_METADATA[p]['type'] for p in available_printers if p in PRINTER_METADATA)
    if len(types) > 1:
        print("\nSua impressora √© colorida? (sim/n√£o/n√£o sei)")
        while True:
            choice = input("Resposta: ").strip().lower()
            if choice in ['sim', 's', 'yes', 'y']:
                previous = list(available_printers)
                filtered = [p for p in available_printers if p in PRINTER_METADATA and PRINTER_METADATA[p]['type'] == 'colorida']
                available_printers = filtered or previous
                break
            elif choice in ['nao', 'n√£o', 'n', 'no']:
                previous = list(available_printers)
                filtered = [p for p in available_printers if p in PRINTER_METADATA and PRINTER_METADATA[p]['type'] == 'monocromatica']
                available_printers = filtered or previous
                break
            elif choice in ['nao sei', 'n√£o sei', 'ns', 'n/s', '', 'nsei']:
                # Se n√£o sabe, mant√©m todas as op√ß√µes
                break
            else:
                print("Por favor, responda com 'sim', 'n√£o' ou 'n√£o sei'")
        
        if len(available_printers) == 1:
            return available_printers[0]
    
    # Pergunta 2: Caracter√≠sticas especiais - Duplex
    if len(available_printers) > 1:
        # Verifica se h√° impressoras com duplex
        duplex_printers = [p for p in available_printers if p in PRINTER_METADATA and 'duplex' in PRINTER_METADATA[p]['features']]
        if duplex_printers and len(duplex_printers) < len(available_printers):
            print("\nSua impressora imprime frente e verso automaticamente (duplex)? (sim/n√£o/n√£o sei)")
            while True:
                choice = input("Resposta: ").strip().lower()
                if choice in ['sim', 's', 'yes', 'y']:
                    available_printers = duplex_printers
                    break
                elif choice in ['nao', 'n√£o', 'n', 'no']:
                    previous = list(available_printers)
                    filtered = [p for p in available_printers if p in PRINTER_METADATA and 'duplex' not in PRINTER_METADATA[p]['features']]
                    available_printers = filtered or previous
                    break
                elif choice in ['nao sei', 'n√£o sei', 'ns', 'n/s', '', 'nsei']:
                    # Se n√£o sabe, pula essa pergunta
                    break
                else:
                    print("Por favor, responda com 'sim', 'n√£o' ou 'n√£o sei'")
            
            if len(available_printers) == 1:
                return available_printers[0]
    
    # Pergunta 3: Caracter√≠sticas especiais - ADF (Alimentador Autom√°tico de Documentos)
    if len(available_printers) > 1:
        # Verifica se h√° impressoras com ADF
        adf_printers = [p for p in available_printers if p in PRINTER_METADATA and 'adf' in PRINTER_METADATA[p]['features']]
        if adf_printers and len(adf_printers) < len(available_printers):
            print("\nSua impressora tem alimentador autom√°tico de documentos (ADF) na parte superior?")
            print("O ADF √© uma bandeja onde voc√™ coloca v√°rias folhas para digitalizar/copiar automaticamente.")
            print("(sim/n√£o/n√£o sei)")
            while True:
                choice = input("Resposta: ").strip().lower()
                if choice in ['sim', 's', 'yes', 'y']:
                    available_printers = adf_printers
                    break
                elif choice in ['nao', 'n√£o', 'n', 'no']:
                    previous = list(available_printers)
                    filtered = [p for p in available_printers if p in PRINTER_METADATA and 'adf' not in PRINTER_METADATA[p]['features']]
                    available_printers = filtered or previous
                    break
                elif choice in ['nao sei', 'n√£o sei', 'ns', 'n/s', '', 'nsei']:
                    # Se n√£o sabe, pula essa pergunta
                    break
                else:
                    print("Por favor, responda com 'sim', 'n√£o' ou 'n√£o sei'")
            
            if len(available_printers) == 1:
                return available_printers[0]
    
    # Pergunta 3.1: Formato de papel - A3
    if len(available_printers) > 1:
        a3_printers = [p for p in available_printers if 'a3' in PRINTER_METADATA[p].get('features', [])]
        if a3_printers and len(a3_printers) < len(available_printers):
            print("\nSua impressora imprime em tamanho A3? (sim/n√£o/n√£o sei)")
            while True:
                choice = input("Resposta: ").strip().lower()
                if choice in ['sim', 's', 'yes', 'y']:
                    available_printers = a3_printers
                    break
                elif choice in ['nao', 'n√£o', 'n', 'no']:
                    previous = list(available_printers)
                    filtered = [p for p in available_printers if p not in a3_printers]
                    available_printers = filtered or previous
                    break
                elif choice in ['nao sei', 'n√£o sei', 'ns', 'n/s', '', 'nsei']:
                    break
                else:
                    print("Por favor, responda com 'sim', 'n√£o' ou 'n√£o sei'")
            if len(available_printers) == 1:
                return available_printers[0]
    
    # Pergunta 3.2: Possui FAX
    if len(available_printers) > 1:
        fax_printers = [p for p in available_printers if 'fax' in PRINTER_METADATA[p].get('features', [])]
        if fax_printers and len(fax_printers) < len(available_printers):
            print("\nSua impressora possui fun√ß√£o de fax? (sim/n√£o/n√£o sei)")
            while True:
                choice = input("Resposta: ").strip().lower()
                if choice in ['sim', 's', 'yes', 'y']:
                    available_printers = fax_printers
                    break
                elif choice in ['nao', 'n√£o', 'n', 'no']:
                    previous = list(available_printers)
                    filtered = [p for p in available_printers if p not in fax_printers]
                    available_printers = filtered or previous
                    break
                elif choice in ['nao sei', 'n√£o sei', 'ns', 'n/s', '', 'nsei']:
                    break
                else:
                    print("Por favor, responda com 'sim', 'n√£o' ou 'n√£o sei'")
            if len(available_printers) == 1:
                return available_printers[0]
    
    # Pergunta 3.3: Porta Ethernet (rede cabeada)
    if len(available_printers) > 1:
        eth_printers = [p for p in available_printers if 'ethernet' in PRINTER_METADATA[p].get('features', [])]
        if eth_printers and len(eth_printers) < len(available_printers):
            print("\nSua impressora tem porta de rede (Ethernet)? (sim/n√£o/n√£o sei)")
            while True:
                choice = input("Resposta: ").strip().lower()
                if choice in ['sim', 's', 'yes', 'y']:
                    available_printers = eth_printers
                    break
                elif choice in ['nao', 'n√£o', 'n', 'no']:
                    previous = list(available_printers)
                    filtered = [p for p in available_printers if p not in eth_printers]
                    available_printers = filtered or previous
                    break
                elif choice in ['nao sei', 'n√£o sei', 'ns', 'n/s', '', 'nsei']:
                    break
                else:
                    print("Por favor, responda com 'sim', 'n√£o' ou 'n√£o sei'")
            if len(available_printers) == 1:
                return available_printers[0]
    
    # Pergunta 4: Pergunta visual sobre o tamanho/formato
    if len(available_printers) > 1:
        # Agrupa por caracter√≠sticas visuais aproximadas
        compact_models = ['impressoraL3110', 'impressoraL3150', 'impressoraL375']  # Modelos mais compactos (base)
        larger_models = ['impressoral3250_l3251', 'impressoraL4150', 'impressoraL4260']  # Modelos maiores (base)
        # Heur√≠stica: modelos com ADF ou A3 tendem a ser maiores
        for p in available_printers:
            feats = PRINTER_METADATA[p].get('features', [])
            if ('adf' in feats or 'a3' in feats) and p not in larger_models:
                larger_models.append(p)
        
        compact_available = [p for p in available_printers if p in compact_models]
        larger_available = [p for p in available_printers if p in larger_models]
        
        if compact_available and larger_available:
            print("\nComo voc√™ descreveria o tamanho da sua impressora?")
            print("1. Mais compacta/pequena (ocupa menos espa√ßo na mesa)")
            print("2. Maior/robusta (mais funcionalidades, ocupa mais espa√ßo)")
            print("3. N√£o sei")
            
            while True:
                choice = input("Digite o n√∫mero (1-3): ").strip()
                if choice == '1':
                    available_printers = compact_available or available_printers
                    break
                elif choice == '2':
                    available_printers = larger_available or available_printers
                    break
                elif choice == '3':
                    # Se n√£o sabe, mant√©m todas as op√ß√µes
                    break
                else:
                    print("Por favor, digite 1, 2 ou 3")
            
            if len(available_printers) == 1:
                return available_printers[0]
    
    # Pergunta 5: S√©rie da impressora (pode ser pulada se usu√°rio n√£o souber)
    if len(available_printers) > 1:
        series = set(PRINTER_METADATA[p]['series'] for p in available_printers if p in PRINTER_METADATA)
        if len(series) > 1:
            print("\nComo √∫ltima op√ß√£o, voc√™ consegue identificar a s√©rie da sua impressora?")
            print("(Geralmente est√° escrita na frente da impressora)")
            series_list = sorted(list(series))
            for i, serie in enumerate(series_list, 1):
                printers_in_series = [p for p in available_printers if p in PRINTER_METADATA and PRINTER_METADATA[p]['series'] == serie]
                if printers_in_series:
                    example = PRINTER_METADATA[printers_in_series[0]]['full_name']
                    print(f"{i}. S√©rie {serie} (ex: {example})")
                else:
                    print(f"{i}. S√©rie {serie}")
            print(f"{len(series_list) + 1}. N√£o sei/N√£o consigo ver")
            
            while True:
                try:
                    choice = int(input(f"Digite o n√∫mero (1-{len(series_list) + 1}): ").strip())
                    if 1 <= choice <= len(series_list):
                        selected_series = series_list[choice - 1]
                        previous = list(available_printers)
                        filtered = [p for p in available_printers if p in PRINTER_METADATA and PRINTER_METADATA[p]['series'] == selected_series]
                        available_printers = filtered or previous
                        break
                    elif choice == len(series_list) + 1:
                        # N√£o sabe a s√©rie, pula para lista final
                        break
                    else:
                        print(f"Por favor, digite um n√∫mero entre 1 e {len(series_list) + 1}")
                except ValueError:
                    print("Por favor, digite um n√∫mero v√°lido")
            
            if len(available_printers) == 1:
                return available_printers[0]
    
    # Se ainda h√° m√∫ltiplas op√ß√µes, tenta √∫ltima diferencia√ß√£o por conectividade Wi-Fi
    if len(available_printers) > 1:
        wifi_printers = [p for p in available_printers if 'wifi' in PRINTER_METADATA[p].get('features', [])]
        if wifi_printers and len(wifi_printers) < len(available_printers):
            print("\nSua impressora tem Wi‚ÄëFi? (sim/n√£o/n√£o sei)")
            while True:
                choice = input("Resposta: ").strip().lower()
                if choice in ['sim', 's', 'yes', 'y']:
                    available_printers = wifi_printers
                    break
                elif choice in ['nao', 'n√£o', 'n', 'no']:
                    previous = list(available_printers)
                    filtered = [p for p in available_printers if p not in wifi_printers]
                    available_printers = filtered or previous
                    break
                elif choice in ['nao sei', 'n√£o sei', 'ns', 'n/s', '', 'nsei']:
                    break
                else:
                    print("Por favor, responda com 'sim', 'n√£o' ou 'n√£o sei'")
            if len(available_printers) == 1:
                return available_printers[0]

    # Se ainda h√° m√∫ltiplas op√ß√µes, encerra o atendimento
    if len(available_printers) > 1:
        print("\n‚ùå N√£o foi poss√≠vel identificar sua impressora com precis√£o.")
        print("Para um atendimento mais eficaz, recomendamos que voc√™:")
        print("‚Ä¢ Verifique o modelo exato da impressora (geralmente est√° na frente do equipamento)")
        print("‚Ä¢ Tente novamente informando o modelo espec√≠fico (ex: L3150, L4260, etc.)")
        print("\nAtendimento encerrado. Obrigado!")
        return None
    
    return available_printers[0] if available_printers else None

def smart_printer_detection(query, available_models, max_attempts=3):
    """Sistema inteligente de detec√ß√£o de impressora"""
    attempt = 0
    
    while attempt < max_attempts:
        if attempt == 0:
            # Primeira tentativa: usar a query original
            user_input = query
            print("Analisando sua pergunta para identificar a impressora...")
        else:
            # Tentativas subsequentes: pedir input espec√≠fico
            print(f"\nTentativa {attempt + 1}/{max_attempts}")
            print("Digite o modelo da sua impressora Epson:")
            print("Exemplos: L3250, L4150, L375, L3150")
            user_input = input("Modelo: ").strip()
        
        if not user_input:
            attempt += 1
            continue
        
        # 1. Busca exata (m√©todo original)
        for model in available_models:
            if normalize_text(model) in normalize_text(user_input):
                metadata = get_printer_metadata_dynamic(model, None)
                print(f"Impressora identificada: {metadata['full_name']}")
                return model
        
        # 2. Busca por similaridade
        similar_printers = find_similar_printers(user_input, 0.6, None)
        
        if similar_printers:
            if len(similar_printers) == 1:
                printer_id, metadata, similarity, match_type = similar_printers[0]
                
                # Verifica se √© diferen√ßa cosm√©tica - aceita automaticamente
                if is_cosmetic_difference(user_input, metadata['full_name']) or \
                   any(is_cosmetic_difference(user_input, alias) for alias in metadata['aliases']):
                    print(f"Impressora identificada: {metadata['full_name']}")
                    return printer_id
                elif similarity >= 0.85:  # Alta confian√ßa
                    print(f"Impressora identificada: {metadata['full_name']} (confian√ßa: {similarity:.0%})")
                    return printer_id
                else:
                    # Confirma com o usu√°rio
                    print(f"Voc√™ quis dizer '{metadata['full_name']}'? (sim/n√£o)")
                    choice = input("Resposta: ").strip().lower()
                    if choice in ['sim', 's', 'yes', 'y']:
                        print(f"Impressora confirmada: {metadata['full_name']}")
                        return printer_id
            else:
                # M√∫ltiplas op√ß√µes similares - usar sistema de filtragem
                print(f"Encontrei {len(similar_printers)} impressoras similares.")
                potential_printers = [p[0] for p in similar_printers if p[2] >= 0.5]
                result = ask_filtering_questions(potential_printers)
                if result:
                    result_metadata = get_printer_metadata_dynamic(result, None)
                    print(f"Impressora identificada: {result_metadata['full_name']}")
                    return result
        
        # 3. Se n√£o encontrou nada similar, usar sistema de filtragem com todas as impressoras
        if attempt == 0:  # S√≥ faz isso na primeira tentativa
            print("N√£o consegui identificar a impressora pela sua pergunta.")
            print("\nVoc√™ sabe o modelo da sua impressora?")
            print("1. Sim, sei o modelo")
            print("2. N√£o sei o modelo")
            choice = input("Digite o n√∫mero (1-2): ").strip()
            
            if choice in ['nao sei', 'n√£o sei', 'ns', 'n/s', '', 'nsei', '2']:
                print("\nSem problemas! Vou fazer algumas perguntas para identificar sua impressora:")
            elif choice in ['sim', 's', 'yes', 'y', '1']:
                print("\nQual √© o modelo?")
                model_input = input("Modelo: ").strip()
                
                # Remove caracteres n√£o alfanum√©ricos para compara√ß√£o
                clean_input = re.sub(r'[^a-zA-Z0-9]', '', model_input.lower())
                
                # Primeiro tenta match exato com os modelos dispon√≠veis
                for model_id, metadata in PRINTER_METADATA.items():
                    model_aliases = [re.sub(r'[^a-zA-Z0-9]', '', alias.lower()) for alias in metadata['aliases']]
                    if clean_input in model_aliases:
                        print(f"Impressora identificada: {metadata['full_name']}")
                        return model_id
                
                # Se n√£o encontrou match exato, procura por similaridade
                similar_printers = find_similar_printers(model_input, 0.6, None)
                if similar_printers:
                    printer_id, metadata, similarity, match_type = similar_printers[0]
                    # Agora s√≥ aceita automaticamente se for MUITO similar
                    if similarity >= 0.9:
                        print(f"Impressora identificada: {metadata['full_name']}")
                        return printer_id
                    else:
                        # Modelo n√£o encontrado - mensagem gen√©rica
                        print(f"\nDesculpe, n√£o encontrei uma impressora '{model_input}'.")
                        print("Vou fazer algumas perguntas para identificar sua impressora corretamente.")
            
            # Se n√£o souber o modelo ou n√£o encontrou, vai para as perguntas de filtragem
            print("\nVou fazer algumas perguntas para identificar sua impressora:")
            result = ask_filtering_questions(available_models)
            if result:
                result_metadata = get_printer_metadata_dynamic(result, None)
                print(f"Impressora identificada: {result_metadata['full_name']}")
                return result
            else:
                # Se ask_filtering_questions retornou None, significa que o atendimento foi encerrado
                # N√£o continua com tentativas adicionais
                return None
        
        attempt += 1
        if attempt < max_attempts:
            print(f"Modelo n√£o reconhecido. Voc√™ tem mais {max_attempts - attempt} tentativa(s).")
    
    # Se esgotar as tentativas
    print("\nN√£o foi poss√≠vel identificar sua impressora.")
    print("Impressoras dispon√≠veis em nossa base de dados:")
    for model in available_models:
        if model in PRINTER_METADATA:
            metadata = PRINTER_METADATA[model]
            print(f"  ‚Ä¢ {metadata['full_name']} - {metadata['description']}")
    
    return None

def check_printer_context(query):
    """Verifica se a pergunta √© relacionada a impressoras"""
    try:
        # Prepara o prompt para verificar contexto
        context = """Voc√™ √© um assistente especializado em identificar se perguntas s√£o relacionadas a impressoras ou n√£o.

ANALISE A SEGUINTE PERGUNTA e responda APENAS com "SIM" ou "N√ÉO":
- Responda "SIM" se a pergunta √© sobre:
  ‚Ä¢ Impressoras (qualquer marca ou modelo)
  ‚Ä¢ Problemas de impress√£o
  ‚Ä¢ Configura√ß√£o de impressoras
  ‚Ä¢ Tintas, cartuchos, papel ou suprimentos
  ‚Ä¢ Qualidade de impress√£o
  ‚Ä¢ Conex√£o de impressoras (USB, Wi-Fi, rede)
  ‚Ä¢ Drivers ou software de impressora
  ‚Ä¢ Manuten√ß√£o de impressoras
  ‚Ä¢ Erros de impress√£o
  ‚Ä¢ Scanner, c√≥pia ou fun√ß√µes relacionadas a multifuncionais

- Responda "N√ÉO" se a pergunta √© sobre:
  ‚Ä¢ Assuntos gerais n√£o relacionados a impressoras
  ‚Ä¢ Outros dispositivos eletr√¥nicos (computadores, celulares, etc)
  ‚Ä¢ Software n√£o relacionado a impress√£o
  ‚Ä¢ Quest√µes pessoais ou conversas gerais
  ‚Ä¢ Matem√°tica, ci√™ncia, hist√≥ria, etc.
  ‚Ä¢ Programa√ß√£o (exceto se for sobre drivers de impressora)

PERGUNTA: """

        # Chama a API para verificar contexto
        prompt = f"{context}\"{query}\"\n\nResposta (apenas SIM ou N√ÉO):"
        
        # Rate limiting
        global last_request_time
        current_time = time.time()
        if current_time - last_request_time < MIN_REQUEST_INTERVAL:
            time.sleep(MIN_REQUEST_INTERVAL - (current_time - last_request_time))
        
        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.1,
                top_p=0.9,
                max_output_tokens=10
            )
        )
        
        # Atualiza tempo da √∫ltima requisi√ß√£o
        last_request_time = time.time()
        
        # Verifica a resposta
        if response and response.text:
            result = response.text.strip().upper()
            return "SIM" in result
        
        # Se n√£o conseguir determinar, assume que √© sobre impressoras para evitar falsos negativos
        return True
        
    except Exception as e:
        print(f"Erro ao verificar contexto: {e}")
        # Em caso de erro, assume que √© sobre impressoras para n√£o bloquear o usu√°rio
        return True

def call_api_detailed(query, manual_sections, mode='detalhado', printer_model=None):
    """Chama API do Gemini com contexto dos manuais"""
    global last_request_time, request_times
    
    try:
        # Prepara contexto dos manuais
        context_parts = []
        for section, score in manual_sections[:5]:  # Usa top 5 se√ß√µes
            context_parts.append(f"SE√á√ÉO (Score: {score}):\nT√çTULO: {section['title']}\nCONTE√öDO: {section['content'][:1000]}...")
        
        context = "\n\n---\n\n".join(context_parts)
        
        # Determina sistema de instru√ß√µes baseado no modo
        if mode == 'rapido':
            system_prompt = f"""Voc√™ √© um especialista t√©cnico em impressoras EPSON, com profundo conhecimento de toda a linha EcoTank. Forne√ßa uma resposta CONCISA e DIRETA.

INSTRU√á√ïES PARA MODO R√ÅPIDO:
- Adapte a resposta especificamente para o modelo {printer_model} identificado
- Considere as caracter√≠sticas espec√≠ficas deste modelo (ex: se tem duplex, wifi, etc)
- Responda de forma BREVE e PR√ÅTICA em 3-4 passos
- Use linguagem simples e direta
- Foque nas particularidades do modelo em quest√£o
- Evite informa√ß√µes gen√©ricas que n√£o se aplicam ao modelo
- IMPORTANTE: Use APENAS o modelo identificado ({printer_model}). N√ÉO mencione outros modelos de impressora
- N√ÉO invente ou cite modelos que n√£o foram especificamente identificados
CONTEXTO DO MANUAL:
{context}"""
        else:
            system_prompt = f"""Voc√™ √© um assistente t√©cnico especializado em impressoras Epson.

IMPORTANTE: Forne√ßa uma resposta COMPLETA e DETALHADA.

Baseie sua resposta nas se√ß√µes do manual fornecidas abaixo. Se a informa√ß√£o n√£o estiver no manual, diga que n√£o encontrou a informa√ß√£o espec√≠fica.

Modelo da impressora: {printer_model or 'N√£o especificado'}

Formato de resposta DETALHADA:
- Explica√ß√£o do problema/situa√ß√£o
- Passos detalhados com explica√ß√µes
- Dicas adicionais quando relevante
- Avisos importantes se aplic√°vel
- Mantenha o formato de passo a passo, com dicas e explica√ß√µes do por que de cada passo.

CONTEXTO DO MANUAL:
{context}"""
        
        # Registra tempo da requisi√ß√£o
        current_time = time.time()
        last_request_time = current_time
        request_times.append(current_time)
        
        # Combina system prompt com query do usu√°rio (Gemini n√£o suporta role system)
        combined_prompt = f"{system_prompt}\n\nPERGUNTA DO USU√ÅRIO: {query}"
        
        # Chama API
        response = model.generate_content(
            combined_prompt,
            generation_config=genai.types.GenerationConfig(
                max_output_tokens=1500 if mode == 'rapido' else 2500,
                temperature=0.1,
            )
        )
        
        if response and response.text:
            return True, response.text
        else:
            return False, "‚ùå Erro: N√£o foi poss√≠vel gerar resposta"
            
    except Exception as e:
        return False, f"‚ùå Erro na API: {e}"

def format_response(response_text):
    """Formata resposta para melhor legibilidade"""
    
    # Adiciona quebras de linha ap√≥s pontos finais seguidos de n√∫mero
    response_text = re.sub(r'(\.)(\s*)(\d+\.)', r'\1\n\n\3', response_text)
    
    # Melhora formata√ß√£o de listas numeradas
    response_text = re.sub(r'^(\d+\.)', r'\n\1', response_text, flags=re.MULTILINE)
    
    # Melhora formata√ß√£o de bullets
    response_text = re.sub(r'^(-|\*)', r'\n\1', response_text, flags=re.MULTILINE)
    
    # Remove m√∫ltiplas quebras de linha consecutivas
    response_text = re.sub(r'\n{3,}', '\n\n', response_text)
    
    return response_text.strip()

def show_search_details(manual_sections):
    """Mostra detalhes das se√ß√µes encontradas"""
    if not manual_sections:
        return
    
    print(f"\nüìã SE√á√ïES ENCONTRADAS ({len(manual_sections)}):")
    print("-" * 60)
    
    for i, (section, score) in enumerate(manual_sections[:5], 1):
        title = section['title'][:80] + "..." if len(section['title']) > 80 else section['title']
        print(f"{i}. Score: {score:3d} | {title}")
    
    if len(manual_sections) > 5:
        avg_score = sum(score for _, score in manual_sections[5:]) / len(manual_sections[5:])
        print(f"   ... e mais {len(manual_sections)-5} se√ß√µes (score m√©dio: {avg_score:.0f})")
    print()

def main():
    """Fun√ß√£o principal moderna - ChromaDB exclusivo"""
    
    print("üöÄ INICIALIZANDO CHATBOT EPSON MODERNO")
    print("=" * 50)
    
    # Verifica e atualiza ChromaDB automaticamente se necess√°rio
    print("üîç Verificando atualiza√ß√µes na base de conhecimento...")
    update_result, update_message = auto_update_chromadb_if_needed()
    
    if update_result:
        print("   ‚úÖ Sistema atualizado e pronto!")
    else:
        if "Nenhuma atualiza√ß√£o necess√°ria" not in update_message:
            print(f"   ‚ö†Ô∏è  {update_message}")
    
    # Inicializa ChromaDB (obrigat√≥rio)
    print("üîß Inicializando sistema ChromaDB...")
    init_chromadb()
    
    # Sincroniza metadados de impressoras do ChromaDB
    print("üîÑ Sincronizando modelos de impressoras...")
    sync_printer_metadata_from_chromadb()
    
    # Obt√©m modelos dispon√≠veis do ChromaDB
    try:
        available_models = chromadb_search.get_available_printer_models()
        print(f"   üì± {len(available_models)} modelos de impressora dispon√≠veis")
    except Exception as e:
        print(f"‚ùå ERRO ao listar modelos: {e}")
        sys.exit(1)
    
    # Interface moderna
    print("\n" + "=" * 50)
    print("ü§ñ CHATBOT EPSON - SISTEMA CHROMADB")
    print("‚ú® Busca sem√¢ntica inteligente ativa!")
    print("=" * 50)
    
    # Sele√ß√£o do modo
    print("\nüéØ Escolha o modo de resposta:")
    print("1. üöÄ Modo R√ÅPIDO - Respostas concisas (3-4 passos)")
    print("2. üìñ Modo DETALHADO - Respostas completas (explica√ß√µes)")
    
    while True:
        modo_escolha = input("\nEscolha o modo (1 ou 2): ").strip()
        if modo_escolha == '1':
            modo_atual = 'rapido'
            print("‚úÖ Modo R√ÅPIDO ativado")
            break
        elif modo_escolha == '2':
            modo_atual = 'detalhado'
            print("‚úÖ Modo DETALHADO ativado")
            break
        else:
            print("üí° Digite 1 para r√°pido ou 2 para detalhado")
    
    print("\nüí¨ Comandos especiais:")
    print("‚Ä¢ 'modo rapido' - Alterna para respostas r√°pidas")
    print("‚Ä¢ 'modo detalhado' - Alterna para respostas completas") 
    print("‚Ä¢ 'reload' - Verifica atualiza√ß√µes na base")
    print("‚Ä¢ 'sair' - Encerra o programa")
    print("=" * 50)
    
    question_count = 0
    
    while True:
        try:
            # Verifica atualiza√ß√µes a cada 5 perguntas
            if question_count > 0 and question_count % 5 == 0:
                print("\nüîç Verificando atualiza√ß√µes autom√°ticas...")
                reload_success, reload_msg = reload_knowledge_base_if_updated()
                if reload_success:
                    try:
                        available_models = chromadb_search.get_available_printer_models()
                    except Exception:
                        available_models = []
            
            query = input("\nSua pergunta: ").strip()
            
            # Comandos especiais
            if query.lower() in ['sair', 'exit', 'quit']:
                print("\nüëã At√© logo!")
                break
            elif query.lower() == 'modo rapido':
                modo_atual = 'rapido'
                print("‚úÖ Alterado para modo R√ÅPIDO")
                continue
            elif query.lower() == 'modo detalhado':
                modo_atual = 'detalhado'
                print("‚úÖ Alterado para modo DETALHADO")
                continue
            elif query.lower() == 'reload':
                print("üîÑ Verificando atualiza√ß√µes...")
                upd_success, upd_msg = auto_update_chromadb_if_needed()
                print(f"   {upd_msg}")
                try:
                    available_models = chromadb_search.get_available_printer_models()
                    print(f"   üì± {len(available_models)} modelos dispon√≠veis")
                except Exception:
                    available_models = []
                continue
            
            if not query or len(query) < 3:
                print("üí° Digite uma pergunta mais espec√≠fica (m√≠nimo 3 caracteres)")
                continue
            
            # Sistema inteligente de detec√ß√£o de impressora
            printer_model = smart_printer_detection(query, available_models, max_attempts=3)
            if not printer_model:
                break
            
            # Busca exclusivamente no ChromaDB
            printer_name = get_printer_metadata_dynamic(printer_model, None)['full_name']
            print(f"\nüîç Buscando informa√ß√µes para: {printer_name}")
            
            # Busca sem√¢ntica no ChromaDB
            manual_sections = enhanced_search_chromadb(query, printer_model)
            
            # Processa resultados da busca ChromaDB
            if manual_sections:
                show_search_details(manual_sections)
                
                # Rate limiting
                can_req, msg = can_make_request()
                if not can_req:
                    print(f"{msg}")
                    continue
                
                # Gera resposta
                modo_texto = "R√ÅPIDA" if modo_atual == 'rapido' else "DETALHADA"
                print(f"ü§ñ Gerando resposta {modo_texto}...")
                
                success, response = call_api_detailed(query, manual_sections, modo_atual, printer_model)
                
                if success:
                    print(f"\nüìã RESPOSTA {modo_texto}:")
                    print("=" * 50)
                    formatted_response = format_response(response)
                    print(formatted_response)
                    print(f"\nüìö Fonte: {len(manual_sections)} se√ß√£o(√µes) do manual oficial")
                else:
                    print(f"‚ùå {response}")
            else:
                print("‚ùå Nenhuma informa√ß√£o relevante encontrada")
                print("üí° Dicas:")
                print("   ‚Ä¢ Tente reformular sua pergunta")
                print("   ‚Ä¢ Use termos mais espec√≠ficos")
                print("   ‚Ä¢ Verifique se o modelo da impressora est√° correto")
            
            question_count += 1
            
        except KeyboardInterrupt:
            print("\n\nüëã Encerrando chatbot...")
            break
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
            print("üîÑ Continuando...")

if __name__ == "__main__":
    main()