#!/usr/bin/env python3
"""
Script para remover do ChromaDB as se√ß√µes de PDFs que foram removidos do Google Drive.

Este script trabalha DIRETAMENTE com o ChromaDB, garantindo que os dados
sejam permanentemente removidos da base de dados vetorial.
"""

import os
import sys
import re
from pathlib import Path
from typing import List, Dict, Set
from collections import defaultdict

# Adicionar o diret√≥rio core ao path para importar fun√ß√µes
PROJECT_ROOT = Path(__file__).parent.parent
sys.path.append(str(PROJECT_ROOT / "core"))
sys.path.append(str(PROJECT_ROOT / "scripts"))

# Google Drive imports
from google.oauth2 import service_account
from googleapiclient.discovery import build

# ChromaDB imports
import chromadb
from sentence_transformers import SentenceTransformer

# CONFIGURA√á√ïES
DRIVE_FOLDER_ID = '1B-Xsgvy4W392yfLP4ilrzrtl8zzmEgTl'
CREDENTIALS_FILE = PROJECT_ROOT / "core" / "key.json"
CHROMADB_PATH = PROJECT_ROOT / "chromadb_storage"
COLLECTION_NAME = "epson_manuals"
EMBEDDING_MODEL = "intfloat/multilingual-e5-base"

def get_drive_service():
    """Conecta ao Google Drive API"""
    try:
        creds = service_account.Credentials.from_service_account_file(
            str(CREDENTIALS_FILE),
            scopes=['https://www.googleapis.com/auth/drive.readonly']
        )
        return build('drive', 'v3', credentials=creds)
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao Google Drive: {e}")
        return None

def list_pdfs_in_drive(service):
    """Lista todos os PDFs atualmente no Google Drive"""
    try:
        results = service.files().list(
            q=f"'{DRIVE_FOLDER_ID}' in parents and mimeType='application/pdf' and trashed=false",
            fields="files(id, name, modifiedTime)",
            pageSize=100
        ).execute()
        return results.get('files', [])
    except Exception as e:
        print(f"‚ùå Erro ao listar PDFs do Drive: {e}")
        return []

def extract_model_from_filename(filename):
    """Extrai o modelo do nome do arquivo"""
    base = os.path.basename(filename)
    model = re.sub(r'\.pdf$', '', base, flags=re.IGNORECASE)
    # Remove espa√ßos mas mant√©m a capitaliza√ß√£o original
    # para corresponder com o formato no ChromaDB
    model = re.sub(r'\s+', '', model)
    return model

def get_chromadb_client():
    """Conecta ao ChromaDB"""
    try:
        client = chromadb.PersistentClient(path=str(CHROMADB_PATH))
        return client
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao ChromaDB: {e}")
        return None

def get_models_in_chromadb(collection):
    """Lista todos os modelos √∫nicos no ChromaDB"""
    try:
        # Pega todos os metadados
        all_data = collection.get(include=['metadatas'])
        
        # Agrupa por modelo
        models = defaultdict(int)
        for metadata in all_data['metadatas']:
            if metadata and 'printer_model' in metadata:
                model = metadata['printer_model']
                models[model] += 1
        
        return dict(models)
    except Exception as e:
        print(f"‚ùå Erro ao listar modelos no ChromaDB: {e}")
        return {}

def find_orphaned_models(chromadb_models, drive_models):
    """Identifica modelos √≥rf√£os (existem no ChromaDB mas n√£o no Drive)"""
    orphaned = {}
    
    # Cria um set com os modelos do Drive em min√∫sculas para compara√ß√£o
    drive_models_lower = {m.lower() for m in drive_models}
    
    for model, count in chromadb_models.items():
        # Compara ignorando mai√∫sculas/min√∫sculas
        if model.lower() not in drive_models_lower:
            orphaned[model] = count
    
    return orphaned

def display_orphaned_models(orphaned_models):
    """Exibe os modelos √≥rf√£os encontrados"""
    if not orphaned_models:
        print("\n‚úÖ Nenhum modelo √≥rf√£o encontrado!")
        print("   A base ChromaDB est√° sincronizada com o Google Drive.")
        return
    
    print(f"\nüìã MODELOS √ìRF√ÉOS ENCONTRADOS NO CHROMADB:")
    print("="*60)
    
    total_sections = 0
    for i, (model, count) in enumerate(orphaned_models.items(), 1):
        print(f"\nüñ®Ô∏è  {i}. Modelo: {model}")
        print(f"   üìÑ Se√ß√µes no ChromaDB: {count}")
        total_sections += count
    
    print(f"\nüìä RESUMO:")
    print(f"   ‚Ä¢ Modelos √≥rf√£os: {len(orphaned_models)}")
    print(f"   ‚Ä¢ Total de se√ß√µes √≥rf√£s: {total_sections}")

def confirm_removal(orphaned_models):
    """Pergunta ao usu√°rio quais modelos remover"""
    print(f"\nü§î ESCOLHA O QUE REMOVER:")
    print("="*60)
    
    models_to_remove = []
    
    for model, count in orphaned_models.items():
        print(f"\n‚ùì Remover todas as {count} se√ß√µes do modelo '{model}'? (s/n): ", end='')
        response = input().strip().lower()
        
        if response == 's':
            models_to_remove.append(model)
            print(f"   ‚úÖ Marcado para remo√ß√£o")
        else:
            print(f"   ‚è≠Ô∏è  Mantendo o modelo")
    
    return models_to_remove

def remove_from_chromadb(collection, models_to_remove):
    """Remove os modelos do ChromaDB"""
    total_removed = 0
    
    for model in models_to_remove:
        try:
            # Busca todos os IDs com este modelo
            results = collection.get(
                where={"printer_model": model},
                include=['metadatas']
            )
            
            if results['ids']:
                # Remove todos os documentos deste modelo
                collection.delete(ids=results['ids'])
                removed_count = len(results['ids'])
                total_removed += removed_count
                print(f"   ‚úÖ Removidas {removed_count} se√ß√µes do modelo '{model}'")
            else:
                print(f"   ‚ö†Ô∏è  Nenhuma se√ß√£o encontrada para o modelo '{model}'")
                
        except Exception as e:
            print(f"   ‚ùå Erro ao remover modelo '{model}': {e}")
    
    return total_removed

def verify_removal(collection, models_removed):
    """Verifica se a remo√ß√£o foi bem-sucedida"""
    print(f"\nüîç Verificando remo√ß√£o...")
    
    all_success = True
    for model in models_removed:
        results = collection.get(
            where={"printer_model": model},
            limit=1
        )
        
        if results['ids']:
            print(f"   ‚ùå Modelo '{model}' ainda tem {len(results['ids'])} se√ß√µes!")
            all_success = False
        else:
            print(f"   ‚úÖ Modelo '{model}' removido completamente")
    
    return all_success

def main():
    print("üßπ LIMPEZA DO CHROMADB - REMO√á√ÉO PERMANENTE")
    print("="*60)
    print("Este script remove PERMANENTEMENTE do ChromaDB as se√ß√µes")
    print("de PDFs que n√£o existem mais no Google Drive.\n")
    
    # Conecta ao Google Drive
    print("üîÑ Conectando ao Google Drive...")
    service = get_drive_service()
    if not service:
        return
    
    # Lista PDFs atuais no Drive
    print("üìÅ Listando PDFs atuais no Drive...")
    drive_pdfs = list_pdfs_in_drive(service)
    if not drive_pdfs:
        print("‚ùå Nenhum PDF encontrado no Drive ou erro ao listar.")
        return
    
    # Extrai modelos dos PDFs do Drive
    current_drive_models = set()
    print(f"\nüìã PDFs encontrados no Drive ({len(drive_pdfs)}):")
    for pdf in drive_pdfs:
        model = extract_model_from_filename(pdf['name'])
        current_drive_models.add(model)
        print(f"   üìÑ {pdf['name']} ‚Üí {model}")
    
    # Conecta ao ChromaDB
    print(f"\nüîå Conectando ao ChromaDB...")
    client = get_chromadb_client()
    if not client:
        return
    
    try:
        collection = client.get_collection(name=COLLECTION_NAME)
        print(f"   ‚úÖ Cole√ß√£o '{COLLECTION_NAME}' carregada")
    except Exception as e:
        print(f"‚ùå Erro ao carregar cole√ß√£o: {e}")
        return
    
    # Lista modelos no ChromaDB
    print(f"\nüìä Analisando ChromaDB...")
    chromadb_models = get_models_in_chromadb(collection)
    
    if not chromadb_models:
        print("‚ö†Ô∏è  ChromaDB vazio ou erro ao listar modelos.")
        return
    
    print(f"   ‚úÖ {len(chromadb_models)} modelos encontrados no ChromaDB")
    for model, count in chromadb_models.items():
        print(f"      ‚Ä¢ {model}: {count} se√ß√µes")
    
    # Identifica modelos √≥rf√£os
    print(f"\nüîç Procurando modelos √≥rf√£os...")
    orphaned_models = find_orphaned_models(chromadb_models, current_drive_models)
    
    # Mostra resultado
    display_orphaned_models(orphaned_models)
    
    if not orphaned_models:
        return
    
    # Pergunta ao usu√°rio o que remover
    models_to_remove = confirm_removal(orphaned_models)
    
    if not models_to_remove:
        print("\n‚è≠Ô∏è  Nenhum modelo selecionado para remo√ß√£o. Saindo...")
        return
    
    # Confirma√ß√£o final
    total_sections_to_remove = sum(orphaned_models[model] for model in models_to_remove)
    total_sections_current = sum(chromadb_models.values())
    
    print(f"\n‚ö†Ô∏è  CONFIRMA√á√ÉO FINAL:")
    print(f"   üóëÔ∏è  Modelos a remover: {', '.join(models_to_remove)}")
    print(f"   üìÑ Total de se√ß√µes a remover: {total_sections_to_remove}")
    print(f"   üìä Se√ß√µes atuais no ChromaDB: {total_sections_current}")
    print(f"   üìä Se√ß√µes ap√≥s remo√ß√£o: {total_sections_current - total_sections_to_remove}")
    
    confirm = input(f"\n‚ùì Confirma a remo√ß√£o PERMANENTE do ChromaDB? (digite 'CONFIRMO'): ")
    
    if confirm != 'CONFIRMO':
        print("\n‚ùå Remo√ß√£o cancelada. Nenhuma altera√ß√£o foi feita.")
        return
    
    # Remove do ChromaDB
    print(f"\nüóëÔ∏è  Removendo do ChromaDB...")
    removed_count = remove_from_chromadb(collection, models_to_remove)
    
    # Verifica se a remo√ß√£o foi bem-sucedida
    if verify_removal(collection, models_to_remove):
        print(f"\n‚úÖ LIMPEZA DO CHROMADB CONCLU√çDA COM SUCESSO!")
        print(f"   üóëÔ∏è  Se√ß√µes removidas permanentemente: {removed_count}")
        print(f"   üìÑ Se√ß√µes restantes: {total_sections_current - removed_count}")
        print(f"   üíæ Base ChromaDB atualizada em: {CHROMADB_PATH}")
        
        # Recomenda√ß√µes
        print(f"\nüí° RECOMENDA√á√ïES:")
        print(f"   üîÑ O chatbot j√° estar√° usando a base atualizada")
        print(f"   üìù As se√ß√µes removidas n√£o estar√£o mais dispon√≠veis")
        print(f"   üöÄ N√£o √© necess√°rio reiniciar o chatbot")
    else:
        print(f"\n‚ö†Ô∏è  Algumas remo√ß√µes podem ter falhado. Verifique os logs acima.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n\n‚èπÔ∏è  Opera√ß√£o cancelada pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
